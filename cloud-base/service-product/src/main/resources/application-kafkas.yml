spring:
  kafka:
   bootstrap-servers: 192.168.228.128:9092

   #自定义topic
   topics:
     - name: demo.test
       num-partitions: 3
       replication-factor: 1
     - name: demo.batch.test
       num-partitions: 3
       replication-factor: 1

   producer:
     # 重试次数
     retries: 0
     # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
     acks: 1
     # 批量大小
     batch-size: 16384
     # 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
     #这个参数指定producer在发送批量消息前等待的时间，当设置此参数后，即便没有达到批量消息的指定大小(batch-size)，到达时间后生产者也会发送批量消息到broker。默认情况下，生产者的发送消息线程只要空闲了就会发送消息，即便只有一条消息。设置这个参数后，发送线程会等待一定的时间，这样可以批量发送消息增加吞吐量，但同时也会增加延迟。
     # linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
     properties:
       linger.ms: 50 #默认值：0毫秒，当消息发送比较频繁时，增加一些延迟可增加吞吐量和性能。
       #这个参数指定producer在一个TCP connection可同时发送多少条消息到broker并且等待broker响应，设置此参数较高的值可以提高吞吐量，但同时也会增加内存消耗。另外，如果设置过高反而会降低吞吐量，因为批量消息效率降低。设置为1，可以保证发送到broker的顺序和调用send方法顺序一致，即便出现失败重试的情况也是如此。
       #注意：当前消息符合at-least-once，自kafka1.0.0以后，为保证消息有序以及exactly once，这个配置可适当调大为5。
       max.in.flight.requests.per.connection: 1 #默认值：5，设置为1即表示producer在connection上发送一条消息，至少要等到这条消息被broker确认收到才继续发送下一条，因此是有序的。
     # 生产端缓冲区大小
     buffer-memory: 33554432
     # Kafka提供的序列化和反序列化类
     # Kafka提供的序列化和反序列化类
     key-serializer: org.apache.kafka.common.serialization.StringSerializer
     value-serializer: org.apache.kafka.common.serialization.StringSerializer
     # 自定义分区器
     # spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
     # 开启事务
#     transaction-id-prefix: tx_


  ###########【初始化消费者配置】###########
   consumer:
     properties:
       # 默认的消费组ID
       group:
         id: defaultConsumerGroup
       # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
       session:
         timeout.ms: 120000
       # 消费请求超时时间
       request:
         timeout.ms: 180000

     # 是否自动提交offset
     enable-auto-commit: true
     # 提交offset延时(接收到消息后多久提交offset)
     auto-commit-interval: 1000
     # 当kafka中没有初始offset或offset超出范围时将自动重置offset
     # earliest:重置为分区中最小的offset;
     # latest:重置为分区中最新的offset(消费分区中新产生的数据);
     # none:只要有一个分区不存在已提交的offset,就抛出异常;
     auto-offset-reset: latest
     # Kafka提供的序列化和反序列化类
     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
     value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
     # 批量消费每次最多消费多少条消息
#     max-poll-records: 10

   listener:
     # 消费端监听的topic不存在时，项目启动会报错(关掉)
     missing-topics-fatal: false
     # 设置批量消费
#     type: batch


